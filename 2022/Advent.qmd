---
title: "Advent"
format: 
  html:
    code-fold: false
---
```{r}
#| include: false
# DEPENDENCY NOT SHOWN
# install.packages("tidyverse")
# install.packages("palmerpenguins")
# install.packages("quarto")
library(palmerpenguins)
library(readr)
library(tidyverse)
library(igraph)
library(purrr)
library(here)
```

# 1
--- Part One ---
```{r}
d <- read_file(here("2022", "input", "01_input.txt"))
dd <-str_split(d, "\n\n") |> unlist()
ddd <- map(dd, str_split, "\n")
elf <- map_dbl(ddd, ~ sum(as.numeric(.x[[1]])))
elf <- elf[!is.na(elf)]

# detect_index(elf, ~.x == max(elf))
max(elf)
sort(elf, decreasing = T)[seq(3)] |> sum()
```



# 2
--- Part One ---

::: {.panel-tabset}
## graph-solution
```{.r}
law = make_graph(~ A-+B-+C-+A)
judge = function(elf, me) {
  d = distances(law, v = elf, to = me, mode = "out")
  as.integer(c(3, 6, 0)[d + 1])
}
data = read_delim(here("2022", "input", "02_input.txt"), 
           delim = " ", 
           col_names = F)

data |> 
  mutate(base_score = case_when(
    X2 == "X" ~ 1,#Rock
    X2 == "Y" ~ 2,#Paper
    X2 == "Z" ~ 3 #Scissors
  )) |> 
  mutate(X2 = case_when(
    X2 == "X" ~ "A",
    X2 == "Y" ~ "B",
    X2 == "Z" ~ "C"
  )) |> 
  mutate(bonus = map2_int(
    X1, X2, judge
  )) |> 
  mutate(final_score = base_score + bonus) |> 
  summarise(n = sum(final_score))
```

## math-solution
```{r}
law = c("A", "B", "C")
judge = function(elf, me) {
  elfmove = match(elf, law)
  mymove = match(me, law)
  mymove - elfmove
}
data = read_delim(here("2022", "input", "02_input.txt"), 
           delim = " ", 
           col_names = F) |> 
  suppressMessages()
data |> 
  mutate(base_score = case_when(
    X2 == "X" ~ 1,#Rock
    X2 == "Y" ~ 2,#Paper
    X2 == "Z" ~ 3 #Scissors
  )) |> 
  mutate(X2 = case_when(
    X2 == "X" ~ "A",
    X2 == "Y" ~ "B",
    X2 == "Z" ~ "C"
  )) |> 
  mutate(
    win = 
      case_when(
      judge(X1, X2) == -1 ~ 0,
      judge(X1, X2) == -2 ~ 6,
      judge(X1, X2) == 1 ~ 6,
      judge(X1, X2) == 0 ~ 3,
      judge(X1, X2) == 2 ~ 0
  )) |> 
  mutate(final_score = win + base_score) |> 
  summarise(n  = sum(final_score))
```
:::

The graph method will take way too long to load for only 2000 observations.

Note how in math-solution do not recycle, this problem would have been easier with python 
indexing, because in python -1 index will be the last. 

--- Part Two ---
```{r}
shapeScore = c(A = 1, B = 2, C = 3)
set = c("A", "B", "C")
data |> 
  mutate(round_score = case_when(
    X2 == "X" ~ 0,
    X2 == "Y" ~ 3,
    X2 == "Z" ~ 6
  )) |> 
  mutate(elf = match(X1, set),
         win_or_lose = case_when(
           X2 == "X" ~ -1,
           X2 == "Y" ~ 0,
           X2 == "Z" ~ 1
         ),
         me = (elf + win_or_lose - 1)%%3 + 1 ) |> 
  mutate(base_score = shapeScore[me]) |> 
  mutate(total =base_score + round_score) |> 
  summarise(n = sum(total))
```
Key indexing formular is `(index - 1)%% cycle_length + 1` this code make index 
recycle. When index is 4 it will cycle back to 1. When index is -1 it cycle back to 3.
A rough proxy of python index.



